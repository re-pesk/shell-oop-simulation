#!/usr/bin/env -S dash

createArray() {
  # Initialize the associative array file if it does not exist
  printf '%s\n' "$@" | while read -r arg; do
    case "$arg" in
      ( *::* )
        echo "$arg"
        ;;
      ( * )
        echo "Unknown argument: $arg" >&2
        return 1
        ;;
    esac
  done
}

# function to get value from array string by key
getValuesByKeys() (
  local array_string="$1"
  if [ -z "$array_string" ]; then
    echo "No array string provided" >&2
    return 1
  fi
  shift
  if [ -z "$1" ]; then
    echo "No key provided to get entry from associative array" >&2
    return 1
  fi
  printf '%s\n' "$array_string" | while read -r entry; do
    local entry_key="${entry%::*}"
    printf '%s\n' "$@" | while read -r key; do
      if [ "$entry_key" = "${key}" ]; then
        echo "${entry#*::}"
        continue
      fi
    done
  done
)

getIndexesByKeys() (
  local array_string="$1"
  if [ -z "$array_string" ]; then
    echo "No array string provided" >&2
    return 1
  fi
  shift
  if [ -z "$1" ]; then
    echo "No key provided to get entry from associative array" >&2
    return 1
  fi
  local index=0
  printf '%s\n' "$array_string" | while read -r entry; do
    local entry_key="${entry%::*}"
    index=$(( index + 1 ))
    printf '%s\n' "$@" | while read -r key; do
      if [ "$entry_key" = "${key}" ]; then
        echo "${index}"
        continue
      fi
    done
  done
)

getEntriesByKeys() (
  local array_string="$1"
  if [ -z "$array_string" ]; then
    echo "No array string provided" >&2
    return 1
  fi
  shift
  if [ -z "$1" ]; then
    echo "No key provided to get entry from associative array" >&2
    return 1
  fi
  printf '%s\n' "$array_string" | while read -r entry; do
    local entry_key="${entry%::*}"
    printf '%s\n' "$@" | while read -r key; do
      if [ "$entry_key" = "${key}" ]; then
        echo "${entry}"
        continue
      fi
    done
  done
)

removeEntriesByKeys() {
  local array_string="$1"
  if [ -z "$array_string" ]; then
    echo "No array string provided" >&2
    return 1
  fi
  shift
  if [ -z "$1" ]; then
    echo "No key provided to get entry from associative array" >&2
    return 1
  fi
  printf '%s\n' "$array_string" | while read -r entry; do
    local entry_key="${entry%::*}"
    printf '%s\n' "$@" | while read -r key; do
      if [ "$entry_key" != "${key}" ]; then
        echo "${entry}"
        continue
      fi
    done
  done
}

_removeEntriesByKeys() {
  # Remove an entry from the associative array file
  local array_string="$1"
  local key="$2"
  if [ ! -f "$arr_name" ]; then
    echo "Array file does not exist: $arr_name" >&2
    return 1
  fi
  local tmp_file=$(mktemp)
  trap "rm -f $tmp_file" EXIT
  grep -v "^$key::" "$arr_name" > "$tmp_file"
  mv "$tmp_file" "$arr_name"
}

setEntry() (
  local array_string="$1"
  if [ -z "$array_string" ]; then
    echo "No array string provided" >&2
    return 1
  fi
  local new_entry="$2"
  if [ -z "$new_entry" ]; then
    echo "No entry provided to set in associative array" >&2
    return 1
  fi
  local new_key=${new_entry%::*}
  if [ -z "$new_key" ]; then
    echo "No key provided in entry: $new_entry" >&2
    return 1
  fi
  local array_tmp=$(mktemp)
  echo "$array_string" > "$array_tmp"
  trap "rm -f $array_tmp" EXIT
  local replaced="false"
  while read -r entry; do
    local key=${entry%::*}
    if [ "$key" != "$new_key" ]; then 
      echo "${entry}"
      continue
    fi
    echo "${new_entry}"
    replaced="true"
  done < $array_tmp

  if [ "$replaced" = "false" ]; then
    echo "${new_entry}"
  fi
)

appendEntries() {
  local base_array="$1"
  local merge_array="$2"

  if [ -z "$base_array" ]; then
    echo "$merge_array"
    return
  fi

  if [ -z "$merge_array" ]; then
    echo "$base_array"
    return
  fi

  echo "$base_array" 
  echo "$merge_array"
}

setEntries() (

  base_array="$1"
  merge_array="$2"

  countKeyOccurence() {
    local key="$1"
    local line_no="$2"
    local count=0
    local index=1

    while [ "$index" -le "$base_line_no" ]; do
      base_line=$(echo "$base_array" | sed -n "${index}p")
      [ -z "$base_line" ] && break
      [ "${base_line%::*}" = "$key" ] && count=$((count+1))
      index=$((index+1))
    done
    echo "$count"
  }

  findLinesWithKey() {
    local key="$1"
    local key_occurence_count="$2"
    local base_line="$3"
  
    local line_no=0
    local merge_idx=0
    local found=0
  
    while :; do
      line_no=$((line_no+1))
      line=$(echo "$merge_array" | sed -n "${line_no}p")
      [ -z "$line" ] && break
      [ "${line%::*}" != "$key" ] && continue
      merge_idx=$((merge_idx+1))
      [ "$merge_idx" -lt "$key_occurence_count" ] && continue
      echo "$line"
      # printf "%s\n" "$line_no" >> "$merged_line_nums"
      merged_line_nums="$(printf "%s\n" ${merged_line_nums} ${line_no})"
      found=1
      break
    done

    [ "$found" -eq 0 ] && echo "$base_line"
  }

  merged_line_nums=""
  merged_line_nums_tmp=$(mktemp)
  > "$merged_line_nums_tmp"
  trap "rm -f $merged_line_nums_tmp" EXIT
  
  base_line_no=1
  printf "%s\n" "$base_array" | while read -r base_line; do
    base_key=${base_line%::*}
    base_val=${base_line#*::}

    # Count how many times this key has appeared so far in base
    key_occurence_count=$(countKeyOccurence "$base_key" "$base_line_no")
    
    # Now find the corresponding Nth occurrence in merge
    findLinesWithKey "$base_key" "$key_occurence_count" "$base_line"
    printf "%s\n" "$merged_line_nums" >> "$merged_line_nums_tmp"
      
    base_line_no=$((base_line_no+1))
  done

  # Print remaining not used merge entries
  merge_line_no=0
  while :; do
    merge_line_no=$((merge_line_no+1))
    grep -qx "$merge_line_no" "$merged_line_nums_tmp" && continue
    merge_line=$(echo "$merge_array" | sed -n "${merge_line_no}p")
    [ -z "$merge_line" ] && break
    echo "$merge_line"
  done
)

makePairs () {
  if [ $# -lt 2 ]; then
    echo "At least one key-value pair must be provided" >&2
    return 1
  fi
  while true; do
    local key="$1"
    local value="$2"
    if [ -z "$key" ] || [ -z "$value" ]; then
      break
    fi
    echo "$key::$value"
    shift 2
  done
}

setPairs() {
  local array_string="$1"
  if [ -z "$array_string" ]; then
    echo "No array string provided" >&2
    return 1
  fi
  shift
  if [ $# -eq 0 ]; then
    echo "No key-value pairs provided to set in associative array" >&2
    return 1
  fi
  local entries=$(makePairs "$@")
  if [ -z "$entries" ]; then
    echo "No valid key-value pairs provided" >&2
    return 1
  fi
  setEntries "$array_string" "$entries"
}
