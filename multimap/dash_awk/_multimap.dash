#!/usr/bin/env -S dash

# Error message for empty multimap string
mm_errorEmptyMapArg () {
  echo "Error! No multimap string provided!" >&2
  exit 1
}

# Error message for unknown option
mm_errorUnknownOption () {
  echo "Unknown option: -${1}" >&2
}

# Check if indexes are valid, if true, return indexes, otherwise exit with error
mm_checkIndexes () {
  local last_index=0

  # Parse options
  while getopts ':l:' opt; do
    case $opt in
      (l) [ -n "${OPTARG}" ] && local last_index="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  shift "$((OPTIND - 1))"

  # Check for index validity, replace negative indexes with positive ones, sort them
  printf '%s\n' $@ | awk -v last_index="$last_index" '
    BEGIN { error = 0 }
    ! /^-?[1-9][0-9]*$/ { printf "Error! Index \x27%s\x27 is not allowed!\n", $0 > "/dev/stderr"; error = 1; exit 1 }
    {
      if ($0 < 0) { $0 = last_index + $0 + 1 }
      if ($0 <= 0) {
        printf "Error! Index \x27%s\x27 is not allowed!\n", $0 > "/dev/stderr"
        error = 1; exit 1
      }
      if ($0 in indexes) next;
      indexes[$0] = 1
      indexesAsValues[length(indexesAsValues)] = $0 + 0
    }
    END { if (error < 1) for (i = 0; i < length(indexesAsValues); i++) print indexesAsValues[i] }
  '
}

# Check if arguments are valid, if true, return arguments, otherwise exit with error
mm_checkArguments() {
  # Check if the arguments are valid
  while getopts ':i:' opt; do
    case $opt in
      (i) [ -n "${OPTARG}" ] && local input_type="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done

  shift "$((OPTIND - 1))"
  [ $# -eq 0 ] && echo "No arguments provided!" >&2 && exit 1

  printf '%s\n' "$@" | awk -v input_type="$input_type" '
    BEGIN {
      patterns[entry] = "^([1-9][0-9]*::|(?:\\:{1,2}|[^:]:|[^:])*::)((?:[^:\n]|\\:|[^:\n]:)+)$"
      patterns[element] = "^((\\:|[^:]:|[^:])+::)?([^:\n]|\\:|[^:\n]:)+$"
      patterns[key] = "^([1-9][0-9]*|(\\:|[^:]:|[^:])+)$"
      patterns[value] = "^([^:\n]|\\:|[^:\n]:)+$"
    }
    { gsub(/^[ \t]+|[ \t]+$/, "", $0) }
    /^[ \t]*$/ { next }
    # { printf "Argument \x27%s\x27\n", $0 > "/dev/stderr" }
    {
      if ($0 != "" && $0 ~ patterns[input_type] && $0 !~ /\\::/) {
        args[length(args)] = $0
        next
      }
      printf "Error! Argument \x27%s\x27 is not allowed!\n", $0 > "/dev/stderr"
      error = 1
      exit 1
    }
    END { if (error < 1) for (i = 0; i < length(args); i++) print args[i] }
  '
}

mm_createMap() (
  # Initialize the multimap file if it does not exist, using awk

  printf '%s\n' "$(mm_checkArguments -i element "$@")" | awk -F'::' '
    BEGIN { OFS = "::" }
    { gsub(/^[ ]+|[ ]+$/, "", $0) }
    /^[ \t]*$/ { next }
    { gsub(/^[ ]+|[ ]+$/, "", $0) }
    ! /::/ { print "_::" $0; next }
    /^([1-9][0-9]*)?::/ { $1 = "_" }
    { print $0 }
  '
)

mm_lastIndex() (
  # Count items in the multimap
  local m="" # multimap string

  # Parse options
  while getopts ':m:' opt; do
    case $opt in
      (m) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  echo "$m" | awk 'END{print NR}'
)

mm_lastNumKey() (
  # Count items with numeric keys (where key is empty) using awk
  local m="" # multimap string

  # Parse options
  while getopts ':m:' opt; do
    case $opt in
      (m) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  echo "$m" | awk -F'::' '
    { if ($1 == "_") count++ }
    END { print count }
  '
)

# There are these types of items:
# * element - original unit of list:
#       - simple value which can be accessed by numeric key which depends from order in multimap
#       - pair of key and value separated by "=" which can be accessed by key;
# * entry - pair of key and value, separated by "=";
# * value - part of entry to the right of separator;
# * key - part of entry to the left of separator.
mm_items() (
  local o="value" # output type
  local m="" # multimap string
  # Parse options
  while getopts ':m:o:' opt; do
    case $opt in
      (m|o) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  echo "$m" | awk -F'::' -v output_type="$o" '
    { key = $1; value = $2 }
    output_type == "value" { print value; next }
    output_type == "element" {
      if (key == "_") { print value; next }
      print $0; next
    }
    key == "_" { count++; key = count }
    output_type == "key" { print key; next }
    { print key "::" value }
  '
)

mm_indexesOf() (
  # Get indexes of items in the multimap
  local i="value" # input type
  local m="" # multimap string

  # Parse options
  while getopts ':i:m:' opt; do
    case $opt in
      (i|m) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  # Items of input type
  local items="$(mm_items -o "$i" -m "$m")"
  # Get indexes of items in the multimap
  indexes="$(printf '%s\n' "$@" | awk -v items="$items" '
    BEGIN { items_no = split(items, items_array, "\n") }
    /^[ ]*$/ { next }
    {
      gsub(/^[ ]+|[ ]+$/, "", $0)
      result = ""
      for (i =1; i <= items_no; i++) {
        if (items_array[i] == $0) { result = result " " i }
      }
      if (!(result == "")) { sub(/^[ ]+/, "", result ); print result }
    }
  ')"

  printf '%s\n' "$indexes"
)

mm_itemsAt() (
  # Get items in the multimap by indexes
  local o="entry" # output type
  local m="" # multimap string

  # Parse options
  while getopts ':m:o:' opt; do
    case $opt in
      (m|o) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  local last_index="$(mm_lastIndex -m "$m")"
  local indexes="$(mm_checkIndexes -l "$last_index" "$@")"
  # echo indexes: "$indexes" >&2
  local items="$(mm_items -o "$o" -m "$m")"

  printf '%s\n': "$indexes" | while read -r index; do
    printf '%s\n': "$items" | awk "NR==$index"
  done
)

# Get indexes of items in the multimap
mm_get() (
  local i="key" # default input type
  local o="value" # default output type
  local m="" # multimap string

  # Parse options
  while getopts ':i:m:o:' opt; do
    case $opt in
      (i|m|o) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  indexes="$(mm_indexesOf -i "$i" -m "$m" "$@")"
  mm_itemsAt -o "$o" -m "$m" "$indexes"
)

mm_append() (
  local m="" # multimap string

  # Parse options
  while getopts ':m:' opt; do
    case $opt in
      (i|m|o) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  shift "$((OPTIND - 1))"

  local arrayToAppend="$(mm_createMap "$@")"

  if [ -z "$m" ]; then
    echo "$arrayToAppend"
    return
  fi

  if [ -z "$arrayToAppend" ]; then
    echo "$m"
    return
  fi

  echo "$m"
  echo "$arrayToAppend"
)

# function to get value from multimap string by key
mm_getValuesByKeys() (
  mm_get -i "key" -o value "$@"
)

mm_getIndexesByKeys() (
  mm_indexesOf -i "key" "$@"
)

mm_getEntriesByKeys() (
  mm_get -i "key" -o "entry" "$@"
)

mm_remainingSet () (
  local last_index="0" # maximum index to use

  # Parse options
  while getopts ':l:' opt; do
    case $opt in
      (l) [ -n "${OPTARG}" ] && local last_index="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  shift "$((OPTIND - 1))"

  indexes="$(mm_checkIndexes -l "$last_index" -- "$@")"
  awk -v indexes="$indexes" -v last_index="$last_index" '
    BEGIN {
      split(indexes, indexesAsValues, "[ \n]")
      for (i in indexesAsValues) indexesAsKeys[indexesAsValues[i]] = ""
      for (i = 1; i <= last_index; i++) { if (!(i in indexesAsKeys)) print i }
      exit
    }
  '
)

mm_remainingIndexes() (
  # Get remaining indexes of items in the multimap
  local m="" # multimap string

  # Parse options
  while getopts ':m:' opt; do
    case $opt in
      (m) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  local last_index="$(mm_lastIndex -m "$m")"
  local indexes="$(mm_checkIndexes -l "$last_index" -- "$@")"
  mm_remainingSet -l "$last_index" -- "$indexes"
)

mm_removeAt() (
  # Get remaining indexes of items in the multimap
  local m="" # multimap string
  local o="value" # output type

  # Parse options
  while getopts ':m:o:' opt; do
    case $opt in
      (m|o) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  local indexes="$(mm_remainingIndexes -m "$m" -- "$@")"
  mm_itemsAt -o "$o" -m "$m" -- "$indexes"
)

mm_remove() {
  local i="key" # input type
  local m="" # multimap string
  local o="value" # output type

    # Parse options
  while getopts ':i:m:o:' opt; do
    case $opt in
      (i|m|o) [ -n "${OPTARG}" ] && local $opt="${OPTARG}";;
      (\?) mm_errorUnknownOption "${OPTARG}";;
    esac
  done
  [ -z "${m}" ] && mm_errorEmptyMapArg
  shift "$((OPTIND - 1))"

  local indexes="$(mm_indexesOf -m "$m" -i "$i" -- "$@")"
  mm_removeAt -m "$m" -o "$o" -- "$indexes"
}

mm_setEntry() (
  local map="$1"
  if [ -z "$map" ]; then
    echo "No multimap string provided" >&2
    return 1
  fi
  local new_entry="$2"
  if [ -z "$new_entry" ]; then
    echo "No entry provided to set in multimap" >&2
    return 1
  fi
  local new_key=${new_entry%::*}
  if [ -z "$new_key" ]; then
    echo "No key provided in entry: $new_entry" >&2
    return 1
  fi
  local array_tmp=$(mktemp)
  echo "$map" > "$array_tmp"
  trap "rm -f $array_tmp" EXIT
  local replaced="false"
  while read -r entry; do
    local key=${entry%::*}
    if [ "$key" != "$new_key" ]; then
      echo "${entry}"
      continue
    fi
    echo "${new_entry}"
    replaced="true"
  done < $array_tmp

  if [ "$replaced" = "false" ]; then
    echo "${new_entry}"
  fi
)

mm_appendEntries() {
  local base_array="$1"
  local merge_array="$2"

  if [ -z "$base_array" ]; then
    echo "$merge_array"
    return
  fi

  if [ -z "$merge_array" ]; then
    echo "$base_array"
    return
  fi

  echo "$base_array"
  echo "$merge_array"
}

mm_setEntries() (

  base_array="$1"
  merge_array="$2"

  countKeyOccurence() {
    local key="$1"
    local line_no="$2"
    local count=0
    local index=1

    while [ "$index" -le "$base_line_no" ]; do
      base_line=$(echo "$base_array" | sed -n "${index}p")
      [ -z "$base_line" ] && break
      [ "${base_line%::*}" = "$key" ] && count=$((count+1))
      index=$((index+1))
    done
    echo "$count"
  }

  findLinesWithKey() {
    local key="$1"
    local key_occurence_count="$2"
    local base_line="$3"

    local line_no=0
    local merge_idx=0
    local found=0

    while :; do
      line_no=$((line_no+1))
      line=$(echo "$merge_array" | sed -n "${line_no}p")
      [ -z "$line" ] && break
      [ "${line%::*}" != "$key" ] && continue
      merge_idx=$((merge_idx+1))
      [ "$merge_idx" -lt "$key_occurence_count" ] && continue
      echo "$line"
      # printf "%s\n" "$line_no" >> "$merged_line_nums"
      merged_line_nums="$(printf "%s\n" ${merged_line_nums} ${line_no})"
      found=1
      break
    done

    [ "$found" -eq 0 ] && echo "$base_line"
  }

  merged_line_nums=""
  merged_line_nums_tmp=$(mktemp)
  > "$merged_line_nums_tmp"
  trap "rm -f $merged_line_nums_tmp" EXIT

  base_line_no=1
  printf "%s\n" "$base_array" | while read -r base_line; do
    base_key=${base_line%::*}
    base_val=${base_line#*::}

    # Count how many times this key has appeared so far in base
    key_occurence_count=$(countKeyOccurence "$base_key" "$base_line_no")

    # Now find the corresponding Nth occurrence in merge
    findLinesWithKey "$base_key" "$key_occurence_count" "$base_line"
    printf "%s\n" "$merged_line_nums" >> "$merged_line_nums_tmp"

    base_line_no=$((base_line_no+1))
  done

  # Print remaining not used merge entries
  merge_line_no=0
  while :; do
    merge_line_no=$((merge_line_no+1))
    grep -qx "$merge_line_no" "$merged_line_nums_tmp" && continue
    merge_line=$(echo "$merge_array" | sed -n "${merge_line_no}p")
    [ -z "$merge_line" ] && break
    echo "$merge_line"
  done
)

mm_makePairs () {
  if [ $# -lt 2 ]; then
    echo "At least one key-value pair must be provided" >&2
    return 1
  fi
  while true; do
    local key="$1"
    local value="$2"
    if [ -z "$key" ] || [ -z "$value" ]; then
      break
    fi
    echo "$key::$value"
    shift 2
  done
}

mm_setPairs() {
  local map="$1"
  if [ -z "$map" ]; then
    echo "No multimap string provided" >&2
    return 1
  fi
  shift
  if [ $# -eq 0 ]; then
    echo "No key-value pairs provided to set in multimap" >&2
    return 1
  fi
  local entries=$(mm_makePairs "$@")
  if [ -z "$entries" ]; then
    echo "No valid key-value pairs provided" >&2
    return 1
  fi
  mm_setEntries "$map" "$entries"
}
