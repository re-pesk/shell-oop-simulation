#!/usr/bin/env -S dash

. ./_assoc_array.dash

nl="
"

test_printVarContent () {
  # Print content of variable
  local label="$1"
  local content="$2"
  echo "$label =>"
  echo "'$content'"
  echo
}

test_assert () (
  local function_name="$1"
  local result="$2"
  local expected="$3"
  [ "$result" = "$expected" ] && return 0 
  echo "Error in '$1'! Result\n'$2'\n!=\n'$3'!\n" >&2
  return 1
)

test_initSubstitutionString1 () {
  # substitution of associative array
  echo "5::true
10::true
15::true and false
15::fifteen"
}

test_printSubstitutionString1 () {
  # Print content of variable
  test_printVarContent "printSubstitutionString1 =>" "$(test_initSubstitutionString1)"
  echo
}

test_iterateOnSubstitutionString1 () {
  # iterating on substitution_string1
  local substitution_string1="$(test_initSubstitutionString1)"
  local expected="[5]=true${nl}[10]=true${nl}[15]=true and false${nl}[15]=fifteen"
  local result=$(echo "$substitution_string1" | while read -r item; do
    echo "[${item%::*}]=${item#*::}"
  done)
  test_assert 'test_iterateOnSubstitutionString1' "$result" "$expected"
}

# get value from substitution_string1
test_getValueByKey1 () {
  local substitution_string1=$(test_initSubstitutionString1)
  local expected="true"
  local result="$(getValueByKey "$substitution_string1" 5)"
  test_assert 'test_getValueByKey' "$result" "$expected"
}

test_getValueByKey2 () {
  local substitution_string1=$(test_initSubstitutionString1)
  local expected="true and false${nl}fifteen"
  local result="$(getValueByKey "$substitution_string1" 15)"
  test_assert 'test_getValueByKey' "$result" "$expected"
}

# get value from substitution_string1
test_getIndexByKey1 () {
  local substitution_string1=$(test_initSubstitutionString1)
  local expected="1"
  local result="$(getIndexByKey "$substitution_string1" 5)"
  test_assert 'test_getIndexByKey' "$result" "$expected"
}

test_getIndexByKey2 () {
  local substitution_string1=$(test_initSubstitutionString1)
  local expected="3${nl}4"
  local result="$(getIndexByKey "$substitution_string1" 15)"
  test_assert 'test_getIndexByKey' "$result" "$expected"
}

test_setEntry () {
  local substitution_string1=$(test_initSubstitutionString1)

  local expected="5::false${nl}10::true${nl}15::true and false${nl}15::fifteen"
  local result=$(setEntry "$substitution_string1" "5::false")
  test_assert 'test_setEntry' "$result" "$expected" || return 1
  
  local expected="5::false${nl}10::true${nl}15::true and false${nl}15::fifteen${nl}25::false and false"
  result=$(setEntry "$result" "25::false and false")
  test_assert 'test_setEntry' "$result" "$expected" || return 1
  return 0
}

#init second substitution string
test_initSubstitutionString2 () {
  # Second substitution string
  echo "20::true
25::true and true
Good evening::true"
}

test_printSubstitutionString2 () {
  # Print content of variable
  test_printVarContent "printSubstitutionString2" "$(test_initSubstitutionString2)"
  echo
}

test_iterateOnSubstitutionString2 () {
  # iterating on substitution_string2
  local substitution_string2="$(test_initSubstitutionString2)"
  local expected="[20]=true
[25]=true and true
[Good evening]=true"
  local result=$(echo "$substitution_string2" | while read -r item; do
    echo "[${item%::*}]=${item#*::}"
  done)
  test_assert 'test_iterateOnSubstitutionString1' "$result" "$expected"
}

test_initSubstitutionString3 () {
  # substitution of associative array
  echo "20::true
15::true and true
15::penkiasdešimt
15::šimtas penkiasdešimt
Good evening::true"
}


# merge two substitution strings of associative array
test_mergeArrays () {
  local substitution_string1="$(test_initSubstitutionString1)"
  local substitution_string3="$(test_initSubstitutionString3)"
  local expected='5::true
10::true
15::true and true
15::penkiasdešimt
20::true
15::šimtas penkiasdešimt
Good evening::true'
  local result="$(mergeArrays "$substitution_string1" "$substitution_string3")"
  test_assert 'test_mergeArrays' "$result" "$expected"
}

test_iterateOnMergedSubstitutionString () {
  merged_substitution_string="$(mergeArrays "$(test_initSubstitutionString1)" "$(test_initSubstitutionString3)")"
  local expected='[5]=true
[10]=true
[15]=true and true
[15]=penkiasdešimt
[20]=true
[15]=šimtas penkiasdešimt
[Good evening]=true'
  local result=$(echo "$merged_substitution_string" | while read -r item; do
    echo "[${item%::*}]=${item#*::}"
  done)
  test_assert 'test_iterateOnMergedSubstitutionString' "$result" "$expected"
}

# test_printVarContent substitution_string1 "$(test_initSubstitutionString1)"
# test_initSubstitutionString1

# test_printSubstitutionString1
test_run () {
  test_iterateOnSubstitutionString1 && echo 0 || echo 1
  test_getValueByKey1 && echo 0 || echo 1
  test_getValueByKey2 && echo 0 || echo 1
  test_getIndexByKey1 && echo 0 || echo 1
  test_getIndexByKey2 && echo 0 || echo 1
  test_setEntry && echo 0 || echo 1
  test_iterateOnSubstitutionString2 && echo 0 || echo 1
  test_mergeArrays && echo 0 || echo 1
  test_iterateOnMergedSubstitutionString && echo 0 || echo 1
}

test_report () {
  local sum=0
  local no=0
  for result in $(test_run); do
    no=$((no + 1))
    sum=$((sum + result))
  done
  echo Testing results: total: ${no}, passed: $((no-sum)), failed: $sum.
}

# test_report


